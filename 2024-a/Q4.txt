#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int two_arrs(int*arr1, int*arr2){
    int c = 0;
    for(int i=0; i<8; i++){
        int num = arr1[i];
        int index = arr2[i]-1;
        c |= (((num & (1 << (index))) >> (index)) << i);
    }
    return c;
}

typedef struct{
    unsigned int b1:1;
    unsigned int b2:1;
    unsigned int b3:1;
    unsigned int b4:1;
    unsigned int b5:1;
    unsigned int b6:1;
    unsigned int b7:1;
    unsigned int b8:1;
}bitfield;

bitfield two_arrs_bitfield(int*arr1, int*arr2){
    bitfield b = {0};
    b.b1 = (arr1[0] >> arr2[0]) & 1;
    b.b2 = (arr1[1] >> arr2[1]) & 1;
    b.b3 = (arr1[2] >> arr2[2]) & 1;
    b.b4 = (arr1[3] >> arr2[3]) & 1;
    b.b5 = (arr1[4] >> arr2[4]) & 1;
    b.b6 = (arr1[5] >> arr2[5]) & 1;
    b.b7 = (arr1[6] >> arr2[6]) & 1;
    b.b8 = (arr1[7] >> arr2[7]) & 1;
    return b;
}

int main(){
    int arr1[] = {0b10101000, 0b01010101, 0b11111110, 0b11111111, 0b11111111, 0b01111111, 0b11111111, 0b11111111};
    int arr2[] = {2,5,1,7,3,8,4,6};
    int n = two_arrs(arr1,arr2);
    printf("%d\n",n);
    int five = 0;
    for(int i=2; i<7; i++){
        five |= ((n >> i) & 1) << i;
    }
    printf("%d\n",five);
    return 0;
}
/*
11011010
01011000
*/