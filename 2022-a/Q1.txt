#include <stdio.h>
#include <stdlib.h>

char*str(){
    char c = 0;
    char*str = NULL;
    size_t size = 1, len = 0;
    while(c != '\n' && c != EOF){
        c = getchar();
        if(len+1 == size){
            size *= 2; 
            char*new_str = (char*)realloc(str, size);
            if(!new_str){
                printf("realloc fail");
                free(str);
                return NULL;
            }
            str = new_str;
        }
        str[len++] = c;
    }
    str[len] = 0;
    return str;
}

typedef struct fifo{
    int _size;
    int _cap;
    int _head;
    int _tail;
    int*_data;
} Fifo, *pFifo;

pFifo new_fifo(size_t cap){
    printf("new\n");
    pFifo new_fifo = (pFifo)malloc(sizeof(Fifo));
    if(!new_fifo){
        printf("fifo malloc fail");
        free(new_fifo);
        return NULL;
    }
    new_fifo->_data = (int*)malloc(cap*sizeof(int));
    if(!new_fifo->_data){
        printf("fifo malloc fail");
        free(new_fifo->_data);
        free(new_fifo);
        return NULL;
    }
    new_fifo->_head = 0;
    new_fifo->_tail = 0;
    new_fifo->_size = 0;
    new_fifo->_cap = cap;
    return new_fifo;
}

void insert(pFifo fifo, int data){
    printf("inserting %d at ",data);
    if(fifo->_size == fifo->_cap){
        printf("full\n");
        return;
    }
    printf("%d\n",fifo->_tail);
    fifo->_data[fifo->_tail] = data;
    fifo->_tail = (fifo->_tail)+1;
    if(fifo->_tail >= fifo->_cap){
        fifo->_tail = 0;
    }
    fifo->_size = fifo->_size + 1;
}

void printArr(pFifo fifo){
    printf("A: ");
    for(int i=0; i<fifo->_cap; i++){
        printf("%d, ", fifo->_data[i]);
    }
    printf("\n");
}

void print(pFifo fifo){
    printf("cap: %d, size: %d, head: %d, tail: %d\nQ: ",fifo->_cap, fifo->_size, fifo->_head, fifo->_tail);
    if(fifo->_size==0){
        printf("\n");
        printArr(fifo);
        return;
    }
    int t = fifo->_head;
    printf("%d",fifo->_data[t]);
    t++;
    while(t != (fifo->_tail)){
        if(t >= fifo->_cap){
            t = 0;
            if(fifo->_tail == 0){
                break;
            }
        }
        printf(", %d",fifo->_data[t]);
        t++;
    }
    printf("\n");
    printArr(fifo);
}

int pop(pFifo fifo){
    printf("pop from %d: ", fifo->_head);
    if(fifo->_size == 0){
        printf("empty\n");
        return -1;
    }
    int data = fifo->_data[fifo->_head];
    fifo->_head = fifo->_head + 1;
    if(fifo->_head >= fifo->_cap){
        fifo->_head = 0;
    }
    fifo->_size = fifo->_size - 1;
    return data;
}

int main(){
    //char*s = str();
    //printf("%s\n",s);
    /*int i=32, j=4, k, *q;
    k = --i / j;
    q = &j;
    {
        int i, j = 10;
        i = j - ++(*q);
        printf("i = %d, j = &%d\n", i, &j);
    }
    printf("i = %d, j = %d\n", i, j);
    */
    pFifo myfifo = new_fifo(4);
    print(myfifo);
    insert(myfifo, 2);
    insert(myfifo, 4);
    insert(myfifo, 6);
    print(myfifo);
    insert(myfifo, 8);
    print(myfifo);
    insert(myfifo, 10);
    printf("%d\n",pop(myfifo));
    print(myfifo);
    printf("%d\n",pop(myfifo));
    print(myfifo);
    printf("%d\n",pop(myfifo));
    insert(myfifo, 10);
    print(myfifo);
    printf("%d\n",pop(myfifo));
    printf("%d\n",pop(myfifo));
    printf("%d\n",pop(myfifo));
    print(myfifo);
    insert(myfifo, 2);
    insert(myfifo, 4);
    insert(myfifo, 6);
    insert(myfifo, 8);
    print(myfifo);
    printf("%d\n",pop(myfifo));
    printf("%d\n",pop(myfifo));
    insert(myfifo, 10);
    insert(myfifo, 2);
    print(myfifo);
    printf("%d\n",pop(myfifo));
    printf("%d\n",pop(myfifo));
    insert(myfifo, 4);
    insert(myfifo, 6);
    print(myfifo);
    printf("%d\n",pop(myfifo));
    printf("%d\n",pop(myfifo));
    insert(myfifo, 8);
    insert(myfifo, 10);
    //char*m[7];
    char(*m)[7];
    printf("%d\n",(int)sizeof(m));
    printf("%d\n",(int)sizeof(*m));
    return 0;
}